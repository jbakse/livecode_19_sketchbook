// allow console log in eslint
/* eslint no-console: 0 */

console.log("Hello!");

// populate reviewer_ids with NAMES of reviewers
const reviewer_ids = [
  "Kyle Li",
  "David Carroll",
  "Clarinda Mac Low",
  "Barbara Morris",
  "Loretta Wolozin",
  "Andrew Zornoza",
  "Soomi Lee",
  "Nancy Valladares",
  "Yuping Hsu",
  "Chao Hui Tu",
  "Ever Bussey",
  "Fei Liu",
  "Aya Karpinska",
  "Henry Lam",
  "Colleen Macklin",
  "Katherine Moriwaki",
  "Melanie Crean",
  "Ayo Okunseinde",
  "Harpreet Sareen",
  "Jesse Harding",
  "Justin Bakse",
  "Jane Pirone",
];

// populate applicant_ids with SLATE IDs of applicants
const applicant_ids = [
  "757924304",
  "752702753",
  "699780406",
  "749514989",
  "767206874",
  "387643258",
  "765345401",
  "351369343",
  "367035158",
  "972730400",
  "401803736",
  "833949264",
  "400191107",
  "801820422",
  "464617728",
  "368156157",
  "852272371",
  "553032046",
  "047869443",
  "126535943",
  "564898742",
  "926112756",
  "694910842",
  "463402524",
  "366617793",
  "595491118",
  "004941746",
  "181423637",
  "136814882",
  "270812379",
  "321914313",
  "918413933",
  "459582950",
  "458149143",
  "099261393",
  "799840461",
  "836775094",
  "638036279",
  "481138418",
  "822253167",
  "410164223",
  "458738709",
  "891958606",
  "464756287",
  "473030096",
  "101407744",
  "901986283",
  "804745007",
  "589046090",
  "599074944",
  "547166459",
  "622712911",
  "650969614",
  "430264498",
  "129214381",
  "875301673",
  "475796703",
  "511075672",
  "966613975",
  "504998564",
  "062415600",
  "371886983",
  "124514734",
  "585755030",
  "047099108",
  "813395753",
  "399534980",
  "143060965",
  "370352130",
  "445262255",
  "951662411",
  "213170009",
  "806259066",
  "949155475",
  "513899728",
  "592389629",
  "321765848",
  "093416926",
  "421295558",
  "740407650",
  "288896180",
  "092675165",
  "623046432",
  "708215388",
  "863920677",
  "679932809",
  "821843954",
  "695607703",
  "518793582",
  "113119747",
  "092618733",
  "162278437",
  "029976632",
  "219282909",
  "172230610",
  "034801972",
  "109718815",
  "077739305",
  "278485664",
  "031271086",
  "407515095",
  "121512948",
  "753995747",
  "512405248",
  "106126256",
  "531231604",
  "232589799",
  "690186883",
  "227368716",
  "737215537",
  "145781867",
  "442348777",
  "560066444",
  "923261230",
  "877060163",
  "775936783",
  "049175465",
  "042032642",
  "165114316",
  "903148791",
  "151014944",
  "462239088",
  "631715617",
  "181825088",
  "766618582",
  "134971156",
  "070460561",
  "618873677",
  "143411256",
  "722829934",
  "337843460",
  "855324618",
  "707923276",
  "359799834",
  "590249834",
  "919602760",
  "092086865",
  "541013538",
  "717133836",
  "137118798",
  "906503954",
  "107554682",
  "303016452",
  "291152367",
  "270135741",
  "757415159",
  "596943490",
  "681260742",
  "679489775",
  "660025074",
  "137041833",
  "794877994",
  "327170015",
  "334004957",
  "451316692",
  "862553443",
  "457321296",
  "775684538",
  "806583374",
  "420697759",
  "832454384",
  "061514728",
  "604111307",
  "089334604",
  "054734061",
  "758491318",
  "061444893",
  "956030093",
  "685706559",
  "322959609",
  "417170519",
  "195309413",
  "109983432",
  "674430437",
  "634286432",
  "147515339",
  "040737263",
  "008463413",
  "987969477",
  "391389967",
  "823253386",
  "274830974",
  "507390092",
  "282506806",
  "775276233",
  "627045444",
  "394767488",
  "739138670",
  "667575551",
  "526936297",
  "467875587",
  "507858762",
  "647964199",
  "773392274",
  "410679888",
  "251824144",
  "107054809",
  "828146251",
  "215258798",
  "866083357",
  "790324656",
  "159351268",
  "186933216",
  "889204005",
  "032498178",
  "601607726",
  "685493052",
  "188051413",
  "885844890",
  "416500283",
  "765506373",
  "598883680",
  "206088492",
  "777976391",
  "562089410",
  "576550410",
  "317957711",
  "640751152",
  "738290781",
  "690398260",
  "128664224",
  "045872213",
  "126283319",
  "033764485",
  "737991698",
  "464481871",
  "955556732",
  "967489352",
  "072071610",
  "507164622",
  "996688957",
  "817408898",
  "963582059",
  "711594051",
  "137677140",
  "772248200",
  "608816749",
  "979785801",
  "016223901",
  "226075732",
  "753332095",
  "621044986",
  "360262856",
  "196990884",
  "563657482",
  "012739841",
  "680205006",
  "493963003",
  "207371967",
  "519535637",
  "324232620",
  "027594192",
  "608111570",
  "010779199",
  "187228856",
  "320534686",
  "720998045",
  "143533782",
  "904379262",
  "644961604",
  "435500455",
  "068955207",
  "807713091",
  "747209864",
  "097296215",
  "630515801",
  "909184676",
  "026219366",
  "560652128",
  "142750231",
  "968890928",
  "728564723",
  "973469698",
  "508041672",
  "133983877",
  "073952619",
  "398378929",
  "917174376",
  "073316619",
  "245505357",
  "350638031",
  "666339014",
  "903331247",
  "615497432",
  "483865504",
  "002085857",
  "040392442",
  "070392726",
  "243524864",
  "075650791",
  "831461559",
  "362494853",
  "093325447",
  "146707665",
  "751649611",
  "635721324",
  "219238165",
  "293395736",
  "802570029",
  "578275744",
  "846733770",
  "180151302",
  "799154437",
  "394623834",
  "395800998",
  "868407762",
  "959730639",
  "527498674",
  "019920803",
  "655880724",
  "022295136",
  "964665295",
  "835531594",
  "814997576",
  "110128316",
  "419591508",
  "635042785",
  "453740414",
  "969466938",
  "829629481",
  "272396901",
  "379041804",
  "982447746",
  "115870287",
  "042719418",
  "815830474",
  "829840838",
  "919601213",
  "955514054",
  "475580980",
  "279686157",
  "762941937",
  "560230623",
  "413882730",
  "085692644",
  "356896743",
  "687973408",
  "789991206",
  "125059965",
  "967771841",
  "484077224",
  "293618860",
  "783498920",
  "312491718",
  "776193323",
  "549117724",
  "800497422",
  "859220563",
  "044263589",
  "529193274",
  "189997812",
  "733833881",
  "741137768",
  "744463728",
  "465378515",
  "878321770",
  "873987850",
  "812746576",
  "884192501",
  "415969323",
  "949826475",
  "872556606",
  "580316614",
];

const assignments = assignApplications(reviewer_ids, applicant_ids);

// convert from {"reviewer_id": [applicant_id, ...]} to [[reviewer_id, applicant_id], ...]
const tupples = Object.entries(assignments).reduce(
  (acc, [reviewer_id, applicant_ids]) =>
    acc.concat(
      applicant_ids.map((applicant_id) => [reviewer_id, applicant_id])
    ),
  []
);

tupples.forEach((t) => {
  t[1] = `'${t[1]}`;
});

// output the assignments
// output can be pasted into spreadsheet, then "split text to columns"
console.log(tupples.join("\n"));

// //////////////////////////////////////////////////////

function assignApplications(reviewer_ids, applicant_ids) {
  // add all ids twice, then shuffle
  const shuffled_applicant_ids = shuffleArray(
    [].concat(applicant_ids, applicant_ids)
  );

  // create an object with reviewer_ids as keys and empty arrays as values using map
  const assignments = Object.fromEntries(
    reviewer_ids.map((reviewer_id) => [reviewer_id, []])
  );

  let turn = 0;
  while (shuffled_applicant_ids.length > 0) {
    const applicant_id = shuffled_applicant_ids.shift();
    const reviewer_id = reviewer_ids[turn % reviewer_ids.length];
    if (assignments[reviewer_id].includes(applicant_id)) {
      // if this applicant is already assigned to the reviewer,
      // put it at the end of the shuffled list
      shuffled_applicant_ids.push(applicant_id);
      // and do this turn again
      turn--;
    } else {
      // if this applicant is not already assigned to the reviewer,
      // add it to their assignments
      assignments[reviewer_id].push(applicant_id);
    }
    turn++;
  }

  // sort the assignments for each reviewer
  for (const reviewer_id of reviewer_ids) {
    assignments[reviewer_id] = assignments[reviewer_id].sort();
  }

  return assignments;
}

// shuffle an array with fisher-yates
function shuffleArray(array) {
  let currentIndex = array.length;
  let temporaryValue, randomIndex;

  while (currentIndex !== 0) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}
